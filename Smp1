loadstring(game:HttpGet('https://pastebin.com/raw/gimbTwW1'))()
-- VARIABLES & SERVICES
-----------------------
local V = {
    -- Libraries
    Lib = loadstring(game:HttpGet('https://raw.githubusercontent.com/xzcReasd/scripts/refs/heads/main/LIBFIX'))(),
    Theme = loadstring(game:HttpGet('https://raw.githubusercontent.com/xzcReasd/scripts/refs/heads/main/ThemeManager'))(),
    Save = loadstring(game:HttpGet('https://raw.githubusercontent.com/xzcReasd/scripts/refs/heads/main/SaveManager'))(),
    
    -- Services
    Players = game:GetService("Players"),
    UIS = game:GetService("UserInputService"),
    RS = game:GetService("RunService"),
    WS = workspace,
    
    -- Objects
    LP = game:GetService("Players").LocalPlayer,
    Cam = workspace.CurrentCamera,
    
    -- Math/Utility
    V2 = Vector2.new,
    V3 = Vector3.new,
    CF = CFrame.new,
    math = math,
    
    -- Current target
    Target = nil,
    
    -- Highlight
    CurrentHighlight = nil,
    
    -- Aimbot prediction
    LastPosition = nil,
    LastUpdateTime = nil,
    
    -- CSync
    CSyncConnection = nil,
    SavedDesync = nil,
    StrafeCFrame = nil,
    CSyncHookActive = false,
    CSyncVisualization = nil
}

-- FOLLOW PART INIT (камера всегда следует за FollowPart)


-- Setup libraries
V.Theme:SetLibrary(V.Lib)
V.Save:SetLibrary(V.Lib)

-- Create window
local Win = V.Lib:CreateWindow({
    Title = 'SimpleBot | Really simple | ' .. os.date('%d.%m.%Y'),
    Themeable = true,
    Info = 'SimpleBot',
    Center = true,
    AutoShow = true
})

-- Create tabs
local Tabs = {
    Aimbot = Win:AddTab('Aimbot'),
    Misc = Win:AddTab('Misc'),
    Player = Win:AddTab('Player'),
    Visuals = Win:AddTab('Visuals'),
    Config = Win:AddTab('Config')
}

-----------------------
-- CONFIG
-----------------------
local Config = {
    Aimbot = {
        Enabled = true,
        StickyKey = Enum.KeyCode.Q,
        SkipCovered = false,
        SkipKnocked = false,
        SkipGrabbed = false,
        ResetKnocked = false,
        ResetGrabbed = false,
        ResetDeath = false,
        -- Aimbot Settings
        AimbotEnabled = false,
        Prediction = 0.1,
        ResolverMode = 'None',
        SelectedPart = 'HumanoidRootPart',
        CSyncEnabled = false,
    CSyncRange = 10,
    CSyncHeight = 5,
    CSyncVisualize = false,
    CSyncVisualizeColor = Color3.new(1, 1, 1)
    },
    TargetHighlight = {
        Enabled = false,
        OutlineColor = Color3.new(1, 0, 0),
        FillColor = Color3.new(1, 0, 0),
        OutlineTransparency = 0,
        FillTransparency = 0.5
    }
}

-----------------------
-- UTILITY FUNCTIONS
-----------------------

local function IsVisible(targetRoot)
    if not Config.Aimbot.SkipCovered then return true end
    
    return V.WS:Raycast(V.Cam.CFrame.Position, (targetRoot.Position - V.Cam.CFrame.Position), (function()
        local params = RaycastParams.new()
        params.FilterDescendantsInstances = {V.LP.Character, targetRoot.Parent}
        params.FilterType = Enum.RaycastFilterType.Blacklist
        return params
    end)()) == nil
end

local function IsPlayerKO(player)
    return player and player.Character and player.Character:FindFirstChild("BodyEffects") and 
           player.Character.BodyEffects:FindFirstChild("K.O") and player.Character.BodyEffects["K.O"].Value and 
           (not player.Character.BodyEffects:FindFirstChild("Grabbed") or not player.Character.BodyEffects.Grabbed.Value)
end

local function IsPlayerGrabbed(player)
    return player and player.Character and player.Character:FindFirstChild("BodyEffects") and 
           player.Character.BodyEffects:FindFirstChild("Grabbed") and player.Character.BodyEffects.Grabbed.Value
end

local function GetClosestPlayerToCursor()
    local closestPlayer, shortestDistance = nil, V.math.huge

    for _, player in ipairs(V.Players:GetPlayers()) do
        if player ~= V.LP and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local screenPoint, onScreen = V.Cam:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
            if onScreen then
                local distance = (V.V2(screenPoint.X, screenPoint.Y) - V.V2(V.UIS:GetMouseLocation().X, V.UIS:GetMouseLocation().Y)).Magnitude
                if (not Config.Aimbot.SkipCovered or IsVisible(player.Character.HumanoidRootPart))
                    and (not Config.Aimbot.SkipKnocked or not IsPlayerKO(player))
                    and (not Config.Aimbot.SkipGrabbed or not IsPlayerGrabbed(player))
                    and distance < shortestDistance then
                    shortestDistance, closestPlayer = distance, player
                end
            end
        end
    end
    return closestPlayer
end

-----------------------
-- TARGET HIGHLIGHT FUNCTIONS
-----------------------

local function CreateTargetHighlight(character)
    if not character or not character:FindFirstChild('HumanoidRootPart') then return nil end
    
    local highlight = Instance.new('Highlight')
    highlight.Parent = character
    highlight.OutlineColor = Config.TargetHighlight.OutlineColor
    highlight.FillColor = Config.TargetHighlight.FillColor
    highlight.OutlineTransparency = Config.TargetHighlight.OutlineTransparency
    highlight.FillTransparency = Config.TargetHighlight.FillTransparency
    highlight.Adornee = character
    
    return highlight
end

local function UpdateTargetHighlight()
    if not Config.TargetHighlight.Enabled then
        if V.CurrentHighlight then
            V.CurrentHighlight:Destroy()
            V.CurrentHighlight = nil
        end
        return
    end
    
    if V.Target and V.Target.character then
        -- Если хайлайт уже существует, обновляем его параметры
        if V.CurrentHighlight and V.CurrentHighlight.Parent == V.Target.character then
            V.CurrentHighlight.OutlineColor = Config.TargetHighlight.OutlineColor
            V.CurrentHighlight.FillColor = Config.TargetHighlight.FillColor
            V.CurrentHighlight.OutlineTransparency = Config.TargetHighlight.OutlineTransparency
            V.CurrentHighlight.FillTransparency = Config.TargetHighlight.FillTransparency
        else
            -- Удаляем старый хайлайт если он есть
            if V.CurrentHighlight then
                V.CurrentHighlight:Destroy()
            end
            -- Создаем новый хайлайт для новой цели
            V.CurrentHighlight = CreateTargetHighlight(V.Target.character)
        end
    else
        -- Нет цели - удаляем хайлайт
        if V.CurrentHighlight then
            V.CurrentHighlight:Destroy()
            V.CurrentHighlight = nil
        end
    end
end

-----------------------
-- AIMBOT PREDICTION & RESOLVER
-----------------------

local function GetPredictionForDistance(distance)
    return Config.Aimbot.Prediction, Config.Aimbot.Prediction
end
local function GetPredictedPosition(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("Humanoid") then
        return nil
    end

    local aimPart = targetPlayer.Character:FindFirstChild(Config.Aimbot.SelectedPart) or targetPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not aimPart then
        return nil
    end
    
    local aimPartPos = aimPart.Position
    
    if not V.LastPosition or not V.LastUpdateTime then
        V.LastPosition = aimPartPos
        V.LastUpdateTime = tick()
        return aimPartPos
    end

    local currentTime = tick()
    local deltaTime = currentTime - V.LastUpdateTime

    local localRoot = V.LP.Character and V.LP.Character:FindFirstChild("HumanoidRootPart")
    local distance = localRoot and (localRoot.Position - aimPartPos).Magnitude or V.math.huge
    local predictionXZ, predictionY = GetPredictionForDistance(distance)
    
    if Config.Aimbot.ResolverMode == "Velocity" then
        local velocity = aimPart.Velocity
        return aimPartPos + V.V3(velocity.X * predictionXZ, velocity.Y * predictionY, velocity.Z * predictionXZ)
    elseif Config.Aimbot.ResolverMode == "MoveDirection" then
        return aimPartPos + (targetPlayer.Character.Humanoid.MoveDirection * (predictionXZ * 10))
    elseif Config.Aimbot.ResolverMode == "CalculateCFrame" then
        if (aimPartPos - V.LastPosition).Magnitude < 0.001 then
            return aimPartPos 
        else
            local moveDist = (aimPartPos - V.LastPosition).Magnitude
            local predictedDistance = (moveDist / deltaTime) * (0.1 * (predictionXZ * 10))
            local predictedPosition = aimPartPos + (aimPartPos - V.LastPosition).Unit * predictedDistance
            
            local yChange = (aimPartPos.Y - V.LastPosition.Y) / deltaTime * (0.1 * predictionY)
            predictedPosition = predictedPosition + V.V3(0, yChange, 0)
            
            V.LastUpdateTime = currentTime
            V.LastPosition = aimPartPos
            return predictedPosition
        end
    end
    return aimPartPos
end

local function Check()
    return Config.Aimbot.AimbotEnabled and V.Target and V.Target.player and V.Target.character
end

-----------------------
-- CSYNC SYSTEM
-----------------------

local function GetRandomPositionAroundTarget(targetRoot)
    local range = Config.Aimbot.CSyncRange or 10
    local height = Config.Aimbot.CSyncHeight or 5
    local randomX = V.math.random(-range, range)
    local randomY = V.math.random(-height, height)
    local randomZ = V.math.random(-range, range)
    local randomOffset = V.V3(randomX, randomY, randomZ)
    return V.CF(targetRoot.Position + randomOffset)
end

local function StartCSync()
    if V.CSyncConnection then
        V.CSyncConnection:Disconnect()
        V.CSyncConnection = nil
    end
    
    if not Config.Aimbot.CSyncEnabled or not V.Target or not V.Target.character then
        return
    end
    
    print('[CSync] Запуск C-Sync')
    
    V.CSyncConnection = V.RS.Heartbeat:Connect(function()
        local clientRoot = V.LP.Character and V.LP.Character:FindFirstChild("HumanoidRootPart")
        local targetRoot = V.Target and V.Target.character and V.Target.character:FindFirstChild("HumanoidRootPart")
        
        if not clientRoot or not targetRoot then
            return
        end
        
        -- Дополнительная проверка что clientRoot все еще валиден
        if not clientRoot.Parent then
            return
        end
        
        -- Сохраняем реальную позицию
        V.SavedDesync = clientRoot.CFrame
        
        -- Генерируем случайную позицию вокруг цели
        V.StrafeCFrame = GetRandomPositionAroundTarget(targetRoot)
        
        -- Проверяем что StrafeCFrame валиден
        if not V.StrafeCFrame then
            return
        end
        
        -- Телепорт на стрейф-позицию с проверкой
        if clientRoot and clientRoot.Parent then
            clientRoot.CFrame = V.StrafeCFrame
        end
        
        -- Ожидаем кадр
        V.RS.RenderStepped:Wait()
        
        -- Возвращаемся на реальную позицию с проверкой
        if clientRoot and clientRoot.Parent and V.SavedDesync then
            clientRoot.CFrame = V.SavedDesync
        end
    end)
end

local function StopCSync()
    if V.CSyncConnection then
        print('[CSync] Остановка C-Sync')
        V.CSyncConnection:Disconnect()
        V.CSyncConnection = nil
    end
    
    -- Возвращаем игрока на реальную позицию перед остановкой
    local clientRoot = V.LP.Character and V.LP.Character:FindFirstChild("HumanoidRootPart")
    if clientRoot and clientRoot.Parent and V.SavedDesync then
        clientRoot.CFrame = V.SavedDesync
        print('[CSync] Позиция игрока восстановлена')
    end
    
    V.SavedDesync = nil
    V.StrafeCFrame = nil
end

local function CreateCSyncVisualization(position)
    if not Config.Aimbot.CSyncVisualize then return end
    
    local e = Instance.new("BillboardGui")
    e.Name = "CSyncVis"
    e.Size = UDim2.new(2, 0, 2, 0)
    e.AlwaysOnTop = true
    
    local img3 = Instance.new("ImageLabel", e)
    img3.Name = "img3"
    img3.Size = UDim2.new(0.6, 0, 0.6, 0)
    img3.BackgroundTransparency = 1
    img3.Image = "rbxassetid://108770683919433"
    img3.ImageTransparency = 0
    img3.ImageColor3 = Config.Aimbot.CSyncVisualizeColor
    
    local adorneePart = Instance.new("Part")
    adorneePart.Size = V.V3(0, 0, 0)
    adorneePart.Anchored = true
    adorneePart.Transparency = 1
    adorneePart.CanCollide = false
    adorneePart.Position = position
    adorneePart.Parent = V.WS
    
    e.Adornee = adorneePart
    e.Parent = V.WS
    
    return {gui = e, part = adorneePart}
end

local function UpdateCSyncVisualization()
    if not Config.Aimbot.CSyncVisualize then
        if V.CSyncVisualization then
            if V.CSyncVisualization.gui then V.CSyncVisualization.gui:Destroy() end
            if V.CSyncVisualization.part then V.CSyncVisualization.part:Destroy() end
            V.CSyncVisualization = nil
        end
        return
    end
    
    -- Показываем визуализацию только если CSync активен и есть позиция десинка
    if not Config.Aimbot.CSyncEnabled or not V.StrafeCFrame then
        if V.CSyncVisualization then
            if V.CSyncVisualization.gui then V.CSyncVisualization.gui:Destroy() end
            if V.CSyncVisualization.part then V.CSyncVisualization.part:Destroy() end
            V.CSyncVisualization = nil
        end
        return
    end
    
    if not V.CSyncVisualization then
        V.CSyncVisualization = CreateCSyncVisualization(V.StrafeCFrame.Position)
    end
    
    if V.CSyncVisualization and V.CSyncVisualization.part then
        -- Обновляем позицию визуализации на координаты CSync десинка
        V.CSyncVisualization.part.Position = V.StrafeCFrame.Position
        if V.CSyncVisualization.gui then
            V.CSyncVisualization.gui.img3.ImageColor3 = Config.Aimbot.CSyncVisualizeColor
        end
    end
end

-----------------------
-- TARGET SYSTEM
-----------------------

local function UpdateTarget(target)
    if not target then
        V.Target = nil
        print('[Target] Цель сброшена')
        -- Останавливаем CSync при сбросе цели
        if Config.Aimbot.CSyncEnabled then
            StopCSync()
        end
        return
    end
    
    if not target:IsA("Player") or not target.Character then
        V.Target = { player = target, name = target.Name }
        return
    end
    
    if not target.Character:FindFirstChild("HumanoidRootPart") or not target.Character:FindFirstChildOfClass("Humanoid") then
        V.Target = { player = target, character = target.Character, name = target.Name }
        return
    end
    
    local humanoidRootPart = target.Character:FindFirstChild("HumanoidRootPart")
    local humanoid = target.Character:FindFirstChildOfClass("Humanoid")
    local localRoot = V.LP.Character and V.LP.Character:FindFirstChild("HumanoidRootPart")
    
    V.Target = {
        player = target,
        name = target.Name,
        displayName = target.DisplayName or target.Name,
        character = target.Character,
        humanoid = humanoid,
        root = humanoidRootPart,
        r15 = (function()
            local parts = {}
            for _, part in ipairs({"Head", "UpperTorso", "LowerTorso", "LeftUpperArm", "LeftLowerArm", "LeftHand", "RightUpperArm", "RightLowerArm", "RightHand", "LeftUpperLeg", "LeftLowerLeg", "LeftFoot", "RightUpperLeg", "RightLowerLeg", "RightFoot", "HumanoidRootPart"}) do
                local p = target.Character:FindFirstChild(part)
                if p then parts[part] = p end
            end
            return parts
        end)(),
        position = humanoidRootPart.Position,
        cframe = humanoidRootPart.CFrame,
        velocity = humanoidRootPart.Velocity,
        walkspeed = humanoid.WalkSpeed,
        distance = localRoot and (humanoidRootPart.Position - localRoot.Position).Magnitude or 0,
        health = humanoid.Health,
        maxHealth = humanoid.MaxHealth,
        team = target.Team or nil,
        isAlive = humanoid.Health > 0
    }
    
    print('[Target] Выбрана новая цель:', V.Target.name)
    
    -- Автоматически запускаем CSync если он включен
    if Config.Aimbot.CSyncEnabled then
        print('[Target] Автозапуск CSync для новой цели')
        StartCSync()
    end
end

local function OnInputBegan(input, gameProcessed)
    if not Config.Aimbot.Enabled or gameProcessed or input.KeyCode ~= Config.Aimbot.StickyKey then return end
    
    if V.Target then
        -- Сбрасываем цель и останавливаем CSync
        print('[Target] Цель сброшена')
        if Config.Aimbot.CSyncEnabled then
            StopCSync()
        end
        V.Target = nil
    else
        local closest = GetClosestPlayerToCursor()
        if closest then
            UpdateTarget(closest) -- Выбираем цель через UpdateTarget
        else
            print('[Target] Не найдено подходящих целей')
        end
    end
end

-----------------------
-- AIMBOT UI
-----------------------

V.AimbotBox = Tabs.Aimbot:AddLeftGroupbox('Aimbot Settings')

V.AimbotBox:AddInput('Prediction', {
    Default = '0.1',
    Numeric = true,
    Finished = true,
    Text = 'Prediction',
    Tooltip = 'Значение предикта для аимбота',
    Callback = function(v)
        Config.Aimbot.Prediction = tonumber(v) or 0.1
    end
})

V.AimbotBox:AddDropdown('ResolverMode', {
    Values = {'None', 'Velocity', 'MoveDirection', 'CalculateCFrame'},
    Default = 1,
    Multi = false,
    Text = 'Resolver Mode',
    Tooltip = 'Режим резолвера для предикта',
    Callback = function(v)
        Config.Aimbot.ResolverMode = v
    end
})

V.AimbotBox:AddDropdown('SelectedPart', {
    Values = {'Head', 'HumanoidRootPart', 'UpperTorso', 'LowerTorso'},
    Default = 2,
    Multi = false,
    Text = 'Target Part',
    Tooltip = 'Часть тела для прицеливания',
    Callback = function(v)
        Config.Aimbot.SelectedPart = v
    end
})

V.TargetBox = Tabs.Aimbot:AddLeftGroupbox('Targeting')

V.TargetBox:AddToggle('TargetingEnabled', {
    Text = 'Targeting Enabled',
    Default = true,
    Tooltip = 'Включить/выключить систему захвата цели',
    Callback = function(Value)
        Config.Aimbot.Enabled = Value
        print('[Aimbot] Targeting ' .. (Value and 'включен' or 'выключен'))
    end
})

V.TargetBox:AddToggle('AimbotEnabled', {
    Text = 'Aimbot Enabled',
    Default = false,
    Tooltip = 'Включить/выключить аимбот',
    Callback = function(v)
        Config.Aimbot.AimbotEnabled = v
    end
})

V.TargetBox:AddToggle('CSyncEnabled', {
    Text = 'CSync',
    Default = false,
    Tooltip = 'Включить/выключить C-Sync (стрейф вокруг цели)',
    Callback = function(v)
        Config.Aimbot.CSyncEnabled = v
        if v then
            StartCSync()
        else
            StopCSync()
        end
    end
})

V.TargetBox:AddLabel('Sticky Key'):AddKeyPicker('StickyKeybind', {
    Default = 'Q',
    SyncToggleState = false,
    Text = 'Sticky Target',
    NoUI = false,
    Tooltip = 'Клавиша для захвата/сброса цели',
    ChangedCallback = function(New)
        Config.Aimbot.StickyKey = (function() local kc = Enum.KeyCode[New] or Enum.KeyCode.Unknown; return kc ~= Enum.KeyCode.Unknown and (print('[Aimbot] Sticky keybind изменен на:', New) or kc) or (warn('[Aimbot] Некорректный keybind:', New) or kc) end)()
    end
})

-----------------------
-- SKIP SETTINGS UI
-----------------------

V.SkipBox = Tabs.Aimbot:AddRightGroupbox('Skip')
V.SkipBox:AddToggle('SkipCovered', {
    Text = 'Skip Covered',
    Default = false,
    Tooltip = 'Пропускать игроков, которые находятся за стеной',
    Callback = function(v)
        Config.Aimbot.SkipCovered = v
    end
})

V.SkipBox:AddToggle('SkipKnocked', {
    Text = 'Skip Knocked',
    Default = false,
    Tooltip = 'Пропускать игроков, которые в нокауте',
    Callback = function(v)
        Config.Aimbot.SkipKnocked = v
    end
})

V.SkipBox:AddToggle('SkipGrabbed', {
    Text = 'Skip Grabbed',
    Default = false,
    Tooltip = 'Пропускать игроков, которых держат',
    Callback = function(v)
        Config.Aimbot.SkipGrabbed = v
    end
})

-----------------------
-- RESET TARGET ON UI
-----------------------

V.ResetBox = Tabs.Aimbot:AddRightGroupbox('ResetTargetON')
V.ResetBox:AddToggle('ResetKnocked', {
    Text = 'Knocked',
    Default = false,
    Tooltip = 'Сбрасывать цель, если она нокаутирована',
    Callback = function(v)
        Config.Aimbot.ResetKnocked = v
    end
})
V.ResetBox:AddToggle('ResetGrabbed', {
    Text = 'Grabbed',
    Default = false,
    Tooltip = 'Сбрасывать цель, если её схватили',
    Callback = function(v)
        Config.Aimbot.ResetGrabbed = v
    end
})
V.ResetBox:AddToggle('ResetDeath', {
    Text = 'Death',
    Default = false,
    Tooltip = 'Сбрасывать цель при смерти',
    Callback = function(v)
        Config.Aimbot.ResetDeath = v
    end
})

-----------------------
-- VISUALIZATIONS UI
-----------------------

V.VisBox = Tabs.Aimbot:AddRightGroupbox('Visualizations')

V.HLToggle = V.VisBox:AddToggle('TargetHighlight', {
    Text = 'Target Highlight',
    Default = false,
    Tooltip = 'Подсвечивать выбранную цель',
    Callback = function(v)
        Config.TargetHighlight.Enabled = v
        if not v and V.CurrentHighlight then
            V.CurrentHighlight:Destroy()
            V.CurrentHighlight = nil
        end
    end
})

V.HLToggle:AddColorPicker('OutlineColor', {
    Default = Color3.new(1, 0, 0),
    Title = 'Outline Color',
    Callback = function(color)
        Config.TargetHighlight.OutlineColor = color
    end
})

V.HLToggle:AddColorPicker('FillColor', {
    Default = Color3.new(1, 0, 0),
    Title = 'Fill Color',
    Callback = function(color)
        Config.TargetHighlight.FillColor = color
    end
})

V.VisBox:AddSlider('OutlineTransparency', {
    Text = 'Outline Transparency',
    Default = 0,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Compact = false,
    Callback = function(v)
        Config.TargetHighlight.OutlineTransparency = v
    end
})

V.VisBox:AddSlider('FillTransparency', {
    Text = 'Fill Transparency',
    Default = 0.5,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Compact = false,
    Callback = function(v)
        Config.TargetHighlight.FillTransparency = v
    end
})

-----------------------
-- CSYNC SETTINGS UI
-----------------------

local CSyncBox = Tabs.Aimbot:AddRightGroupbox('CSync Settings')

CSyncBox:AddSlider('CSyncRange', {
    Text = 'Strafe Range',
    Default = 10,
    Min = 5,
    Max = 50,
    Rounding = 1,
    Compact = false,
    Tooltip = 'Радиус стрейфа вокруг цели',
    Callback = function(v)
        Config.Aimbot.CSyncRange = v or 10
    end
})

CSyncBox:AddSlider('CSyncHeight', {
    Text = 'Height Variation',
    Default = 5,
    Min = 0,
    Max = 30,
    Rounding = 1,
    Compact = false,
    Tooltip = 'Вариация высоты стрейфа',
    Callback = function(v)
        Config.Aimbot.CSyncHeight = v or 5
    end
})

local CSyncVisToggle = CSyncBox:AddToggle('CSyncVisualize', {
    Text = 'Visualize',
    Default = false,
    Tooltip = 'Визуализация позиции десинка',
    Callback = function(v)
        Config.Aimbot.CSyncVisualize = v
        UpdateCSyncVisualization()
    end
})

CSyncVisToggle:AddColorPicker('CSyncVisualizeColor', {
    Default = Color3.new(1, 1, 1),
    Title = 'Visualize Color',
    Callback = function(color)
        Config.Aimbot.CSyncVisualizeColor = color
        if V.CSyncVisualization and V.CSyncVisualization.gui then
            V.CSyncVisualization.gui.img3.ImageColor3 = color
        end
    end
})

local function AutoResetTarget()
    if not V.Target or not V.Target.player then return end
    
    if (Config.Aimbot.ResetKnocked and IsPlayerKO(V.Target.player)) or
       (Config.Aimbot.ResetGrabbed and IsPlayerGrabbed(V.Target.player)) or
       (Config.Aimbot.ResetDeath and (not V.Target.player.Character or not V.Target.player.Character:FindFirstChildOfClass('Humanoid') or V.Target.player.Character:FindFirstChildOfClass('Humanoid').Health <= 0)) then
        print('[ResetTarget] Сброс цели')
        V.Target = nil
    end
end

-----------------------
-- CONNECTIONS
-----------------------
V.RS.RenderStepped:Connect(function()
    AutoResetTarget()
    UpdateTargetHighlight()
    UpdateCSyncVisualization()
end)
V.UIS.InputBegan:Connect(OnInputBegan)
V.Save:BuildConfigSection(Tabs.Config)
V.ThemeBox = Tabs.Config:AddLeftGroupbox('')
V.Theme:ApplyToGroupbox(V.ThemeBox)
V.Theme:LoadDefault()
V.Save:LoadAutoloadConfig()

-----------------------
-- C-SYNC SPOOF HOOK
local __csync
__csync = hookmetamethod(game, "__index", function(t,k)
    if not checkcaller() and k=="CFrame" and V.SavedDesync and Config.Aimbot.CSyncEnabled then
        local lpRoot = V.LP.Character and V.LP.Character:FindFirstChild("HumanoidRootPart")
        if t==lpRoot then
            return V.SavedDesync
        end
    end
    return __csync(t,k)
end)

-- AIMBOT HOOK
-----------------------
local __aimbot
__aimbot = hookmetamethod(game, "__index", function(t, k)
    if t:IsA("Mouse") and (k == "Hit" or k == "Target") then
        if not Check() then
            return __aimbot(t, k)
        end

        local selPart = V.Target.character and V.Target.character:FindFirstChild(Config.Aimbot.SelectedPart)
        if selPart then
            local predictedPos = GetPredictedPosition(V.Target.player) or selPart.Position
            local hit = V.CF(predictedPos)
            return k == "Hit" and hit or selPart
        end
    end
    return __aimbot(t, k)
end)
